import 'package:flutter/material.dart';
import 'package:sizer/sizer.dart';

import '../../core/app_export.dart';
import './widgets/ai_response_widget.dart';
import './widgets/header_widget.dart';
import './widgets/suggestion_chips_widget.dart';
import './widgets/text_input_field_widget.dart';

class TextInputScreen extends StatefulWidget {
  const TextInputScreen({Key? key}) : super(key: key);

  @override
  State<TextInputScreen> createState() => _TextInputScreenState();
}

class _TextInputScreenState extends State<TextInputScreen> {
  final TextEditingController _textController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final FocusNode _textFocusNode = FocusNode();

  bool _isLoading = false;
  String _aiResponse = '';
  bool _hasSubmittedQuery = false;
  static const int _maxCharacters = 500;

  // Mock AI responses for different query types
  final Map<String, String> _mockResponses = {
    '‡∞™‡∞Ç‡∞ü ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤‡±Å':
        '''‡∞™‡∞Ç‡∞ü ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Æ‡±à‡∞®‡∞¶‡∞ø. ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£‡∞Ç‡∞ó‡∞æ ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞Ç‡∞ö‡±á ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤‡±Å:

üå± **‡∞Ü‡∞ï‡±Å‡∞≤ ‡∞Æ‡∞ö‡±ç‡∞ö‡∞≤‡±Å**: ‡∞´‡∞Ç‡∞ó‡∞≤‡±ç ‡∞á‡∞®‡±ç‡∞´‡±Ü‡∞ï‡±ç‡∞∑‡∞®‡±ç ‡∞µ‡∞≤‡±ç‡∞≤ ‡∞µ‡∞∏‡±ç‡∞§‡∞æ‡∞Ø‡∞ø
üå± **‡∞µ‡±á‡∞∞‡±ç‡∞≤ ‡∞ï‡±Å‡∞≥‡±ç‡∞≥‡∞°‡∞Ç**: ‡∞Ö‡∞ß‡∞ø‡∞ï ‡∞®‡±Ä‡∞∞‡±Å ‡∞µ‡∞≤‡±ç‡∞≤ ‡∞∏‡∞Ç‡∞≠‡∞µ‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø
üå± **‡∞ï‡±Ä‡∞ü‡∞ï‡∞æ‡∞≤ ‡∞¶‡∞æ‡∞°‡∞ø**: ‡∞∏‡∞∞‡±à‡∞® ‡∞™‡±Å‡∞∞‡±Å‡∞ó‡±Å‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡±Å ‡∞µ‡∞æ‡∞°‡∞æ‡∞≤‡∞ø

**‡∞ö‡∞ø‡∞ï‡∞ø‡∞§‡±ç‡∞∏**: 
- ‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å ‡∞µ‡∞æ‡∞°‡∞Ç‡∞°‡∞ø
- ‡∞∏‡∞∞‡±à‡∞® ‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤ ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
- ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø‡∞ó‡±ç‡∞∞‡∞∏‡±ç‡∞§ ‡∞≠‡∞æ‡∞ó‡∞æ‡∞≤‡∞®‡±Å ‡∞§‡±ä‡∞≤‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø

‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞ï‡±Å ‡∞Æ‡±Ä ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞Ö‡∞ß‡∞ø‡∞ï‡∞æ‡∞∞‡∞ø‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.''',
    '‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å': '''‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤ ‡∞µ‡∞æ‡∞°‡∞ï‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞Ö‡∞°‡∞ø‡∞ó‡∞æ‡∞∞‡±Å:

üåæ **‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å** (‡∞â‡∞§‡±ç‡∞§‡∞Æ‡∞Ç):
- ‡∞ó‡±ã‡∞¨‡∞∞ ‡∞é‡∞∞‡±Å‡∞µ‡±Å
- ‡∞ï‡∞Ç‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç
- ‡∞µ‡∞∞‡±ç‡∞Æ‡±Ä ‡∞ï‡∞Ç‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç

üåæ **‡∞∞‡∞∏‡∞æ‡∞Ø‡∞® ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å**:
- ‡∞Ø‡±Ç‡∞∞‡∞ø‡∞Ø‡∞æ (‡∞®‡∞§‡±ç‡∞∞‡∞ú‡∞®‡∞ø ‡∞ï‡±ã‡∞∏‡∞Ç)
- DAP (‡∞´‡∞æ‡∞∏‡±ç‡∞™‡∞∞‡∞∏‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç)
- MOP (‡∞™‡±ä‡∞ü‡∞æ‡∞∑‡∞ø‡∞Ø‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç)

**‡∞µ‡∞æ‡∞°‡∞ï‡∞Ç**:
- ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞ö‡±á‡∞Ø‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø
- ‡∞∏‡∞∞‡±à‡∞® ‡∞®‡∞ø‡∞∑‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø‡∞≤‡±ã ‡∞µ‡∞æ‡∞°‡∞Ç‡∞°‡∞ø
- ‡∞∏‡∞Æ‡∞Ø‡∞æ‡∞®‡±Å‡∞ï‡±Ç‡∞≤‡∞Ç‡∞ó‡∞æ ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø

‡∞Æ‡±Ä ‡∞™‡∞Ç‡∞ü ‡∞∞‡∞ï‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞¨‡∞ü‡±ç‡∞ü‡∞ø ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤ ‡∞Æ‡±ã‡∞§‡∞æ‡∞¶‡±Å ‡∞Æ‡∞æ‡∞∞‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.''',
    '‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤': '''‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤ ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡±ç‡∞• ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®:

üíß **‡∞∏‡∞∞‡±à‡∞® ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡±Å‡∞≤‡±Å**:
- ‡∞°‡±ç‡∞∞‡∞ø‡∞™‡±ç ‡∞á‡∞∞‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç (‡∞®‡±Ä‡∞ü‡∞ø ‡∞Ü‡∞¶‡∞æ)
- ‡∞∏‡±ç‡∞™‡±ç‡∞∞‡∞ø‡∞Ç‡∞ï‡±ç‡∞≤‡∞∞‡±ç ‡∞∏‡∞ø‡∞∏‡±ç‡∞ü‡∞Æ‡±ç
- ‡∞´‡∞∞‡±ç‡∞∞‡±ã ‡∞á‡∞∞‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç

üíß **‡∞∏‡∞Æ‡∞Ø‡∞Ç**:
- ‡∞§‡±Ü‡∞≤‡±ç‡∞≤‡∞µ‡∞æ‡∞∞‡±Å‡∞ú‡∞æ‡∞Æ‡±Å‡∞® ‡∞≤‡±á‡∞¶‡∞æ ‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç
- ‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç ‡∞®‡±Ä‡∞∞‡±Å ‡∞µ‡±á‡∞Ø‡∞µ‡∞¶‡±ç‡∞¶‡±Å
- ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞§‡±á‡∞Æ‡∞®‡±Å ‡∞ö‡±Ç‡∞∏‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞£‡∞Ø‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø

üíß **‡∞≤‡∞æ‡∞≠‡∞æ‡∞≤‡±Å**:
- ‡∞®‡±Ä‡∞ü‡∞ø ‡∞µ‡±É‡∞ß‡∞æ ‡∞§‡∞ó‡±ç‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø
- ‡∞™‡∞Ç‡∞ü ‡∞¶‡∞ø‡∞ó‡±Å‡∞¨‡∞°‡∞ø ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø
- ‡∞ï‡∞æ‡∞∞‡±ç‡∞Æ‡∞ø‡∞ï ‡∞µ‡±ç‡∞Ø‡∞Ø‡∞Ç ‡∞§‡∞ó‡±ç‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø

‡∞Æ‡±Ä ‡∞™‡∞Ç‡∞ü ‡∞∞‡∞ï‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞∞‡∞ï‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞¨‡∞ü‡±ç‡∞ü‡∞ø ‡∞®‡±Ä‡∞ü‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç ‡∞Æ‡∞æ‡∞∞‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.''',
    'default': '''‡∞Æ‡±Ä ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞ï‡±Å ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å. 

üåæ **‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞∏‡∞≤‡∞π‡∞æ‡∞≤‡±Å**:
- ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞ö‡±á‡∞Ø‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø
- ‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§ ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø
- ‡∞∏‡∞∞‡±à‡∞® ‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞® ‡∞∞‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø
- ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø

üåæ **‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç**:
- ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞Ö‡∞ß‡∞ø‡∞ï‡∞æ‡∞∞‡∞ø‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
- ‡∞ï‡±É‡∞∑‡∞ø ‡∞µ‡∞ø‡∞ú‡±ç‡∞û‡∞æ‡∞® ‡∞ï‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
- ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞ú‡±ç‡∞û‡±Å‡∞≤‡±à‡∞® ‡∞∞‡±à‡∞§‡±Å‡∞≤ ‡∞∏‡∞≤‡∞π‡∞æ ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø

‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞ï‡±Å ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.'''
  };

  @override
  void initState() {
    super.initState();
    _textController.addListener(_onTextChanged);
  }

  @override
  void dispose() {
    _textController.dispose();
    _scrollController.dispose();
    _textFocusNode.dispose();
    super.dispose();
  }

  void _onTextChanged() {
    setState(() {});
  }

  void _onSuggestionChipTap(String suggestion) {
    if (_textController.text.isEmpty) {
      _textController.text = suggestion;
    } else {
      _textController.text += ' $suggestion';
    }
    _textController.selection = TextSelection.fromPosition(
      TextPosition(offset: _textController.text.length),
    );
    setState(() {});
  }

  Future<void> _submitQuery() async {
    if (_textController.text.trim().isEmpty || _isLoading) return;

    setState(() {
      _isLoading = true;
      _hasSubmittedQuery = true;
    });

    // Hide keyboard
    FocusScope.of(context).unfocus();

    // Scroll to show response area
    Future.delayed(Duration(milliseconds: 100), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });

    // Simulate AI processing time
    await Future.delayed(Duration(seconds: 2));

    // Generate response based on query content
    String response = _generateMockResponse(_textController.text);

    setState(() {
      _isLoading = false;
      _aiResponse = response;
    });

    // Scroll to show complete response
    Future.delayed(Duration(milliseconds: 300), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: 500),
          curve: Curves.easeOut,
        );
      }
    });
  }

  String _generateMockResponse(String query) {
    String lowerQuery = query.toLowerCase();

    if (lowerQuery.contains('‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å') ||
        lowerQuery.contains('‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤‡±Å') ||
        lowerQuery.contains('‡∞∞‡±ã‡∞ó‡∞Ç')) {
      return _mockResponses['‡∞™‡∞Ç‡∞ü ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤‡±Å']!;
    } else if (lowerQuery.contains('‡∞é‡∞∞‡±Å‡∞µ‡±Å') ||
        lowerQuery.contains('‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å') ||
        lowerQuery.contains('‡∞Æ‡∞Ç‡∞¶‡±Å')) {
      return _mockResponses['‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å']!;
    } else if (lowerQuery.contains('‡∞®‡±Ä‡∞∞‡±Å') ||
        lowerQuery.contains('‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤') ||
        lowerQuery.contains('‡∞®‡±Ä‡∞ü‡∞ø')) {
      return _mockResponses['‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤']!;
    } else {
      return _mockResponses['default']!;
    }
  }

  void _onVoicePressed() {
    // Voice input functionality would be implemented here
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞§‡±ç‡∞µ‡∞∞‡∞≤‡±ã ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø'),
        duration: Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _onClosePressed() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.lightTheme.scaffoldBackgroundColor,
      body: Column(
        children: [
          HeaderWidget(
            onClosePressed: _onClosePressed,
            characterCount: _textController.text.length,
            maxCharacters: _maxCharacters,
          ),
          Expanded(
            child: SingleChildScrollView(
              controller: _scrollController,
              physics: BouncingScrollPhysics(),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(height: 2.h),

                  // Text input field
                  TextInputFieldWidget(
                    controller: _textController,
                    onChanged: (value) => _onTextChanged(),
                    onVoicePressed: _onVoicePressed,
                    isLoading: _isLoading,
                    maxCharacters: _maxCharacters,
                  ),

                  SizedBox(height: 2.h),

                  // Suggestion chips
                  SuggestionChipsWidget(
                    onChipTap: _onSuggestionChipTap,
                    isLoading: _isLoading,
                  ),

                  SizedBox(height: 2.h),

                  // AI Response
                  if (_hasSubmittedQuery)
                    AiResponseWidget(
                      response: _aiResponse,
                      isLoading: _isLoading,
                    ),

                  SizedBox(height: 10.h), // Extra space for keyboard
                ],
              ),
            ),
          ),
        ],
      ),

      // Send button
      floatingActionButton:
          _textController.text.trim().isNotEmpty && !_isLoading
              ? FloatingActionButton.extended(
                  onPressed: _submitQuery,
                  backgroundColor: AppTheme.lightTheme.colorScheme.primary,
                  foregroundColor: AppTheme.lightTheme.colorScheme.onPrimary,
                  icon: CustomIconWidget(
                    iconName: 'send',
                    color: AppTheme.lightTheme.colorScheme.onPrimary,
                    size: 20,
                  ),
                  label: Text(
                    '‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø',
                    style: AppTheme.lightTheme.textTheme.labelLarge?.copyWith(
                      color: AppTheme.lightTheme.colorScheme.onPrimary,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                )
              : null,
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }
}